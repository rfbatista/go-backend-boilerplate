name: Terraform Production

on:
  push:
    branches:
      - develop 
    paths:
    - 'terraform/**'
  pull_request:
    paths:
    - 'terraform/**'

jobs:
  terraform:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform/dev
    steps:

    - name: Checkout Repo
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TERRAFORM_API_TOKEN }}

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    - name: Terraform Init
      id: init
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TF_VAR_HASHICORP_ORGANIZATION_NAME: ${{ secrets.TERRAFORM_ORGANIZATION_NAME }}
        TF_VAR_HASHICORP_WORKSPACE_NAME: ${{ secrets.TERRAFORM_WORKSPACE_NAME }}
        TF_VAR_HASHICORP_TOKEN: ${{ secrets.TERRAFORM_API_TOKEN }}
        TF_VAR_HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        TF_VAR_HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
      run: terraform init


    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color


    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TF_VAR_HASHICORP_ORGANIZATION_NAME: ${{ secrets.TERRAFORM_ORGANIZATION_NAME }}
        TF_VAR_HASHICORP_WORKSPACE_NAME: ${{ secrets.TERRAFORM_WORKSPACE_NAME }}
        TF_VAR_HASHICORP_TOKEN: ${{ secrets.TERRAFORM_API_TOKEN }}
        TF_VAR_HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        TF_VAR_HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
        TF_VAR_APPLICATION_PATH: '${{ github.workspace }}/pkg'
      run: echo '${{ github.workspace }}/pkg' && ls '${{ github.workspace }}/pkg' && terraform plan -no-color -input=false
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation üìë\`${{ steps.validate.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: github.ref == 'refs/heads/develop' && github.event_name == 'push'  
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TF_VAR_HASHICORP_ORGANIZATION_NAME: ${{ secrets.TERRAFORM_ORGANIZATION_NAME }}
        TF_VAR_HASHICORP_WORKSPACE_NAME: ${{ secrets.TERRAFORM_WORKSPACE_NAME }}
        TF_VAR_HASHICORP_TOKEN: ${{ secrets.TERRAFORM_API_TOKEN }}
        TF_VAR_HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        TF_VAR_HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
        TF_VAR_APPLICATION_PATH: '${{ github.workspace }}/pkg'
      run: terraform apply -auto-approve -input=false
